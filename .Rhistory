lamb=5/94.32
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poiddon.test(5,94.32)$conf
poison.test(5,94.32)$conf
poisson.test(5,94.32)$conf
library("swirl")
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference<-g2-g1
mean(diffence)
mean(difference)
s<-sd(difference)
qt(.975,9)+c(-1,1)*mn
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(.975,9)$conf.int
skip()
options(editor = "internal")
swirl()
swirl()
sp<-(8-1)*15.34^2+(21-1)*18.23^2
7+20
ns<-27
sp<-sqrt(sp/ns)
skip()
skip()
skip()
t.test(g2-g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=true,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
skip()
skip()
skip()
skip()
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
options(editor = "internal")
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("knitr",
"RWekajars",
"qdapDictionaries",
"qdapRegex",
"qdapTools",
"RColorBrewer",
"qdap",
"NLP",
"tm",
"SnowballC",
"slam",
"RWeka",
"rJava",
"wordcloud",
"stringr",
"DT",
"stringi",
"googleVis",
"ggplot2")
ipak(packages)
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
install.packages()
install.packages("rJava")
library(rJava)
version()
library(rJava)
library(RWekajars)
shiny::runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
This exercise was divided into seven sub tasks like data cleansing, exploratory analysis, the creation of a predictive model and more.
runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
While entering the text (**1**), the field with the predicted next word (**2**) refreshes instantaneously and also the whole text input (**3**) gets displayed.
runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
setwd("~/Trading/02_Research/ReverseEngineering")
load(".RData")
ls()
View(data.EURUSD.M15[1:100,])
head(data.EURUSD.M15[1:100,])
head(time(data.EURUSD.M15))
head(index(data.EURUSD.M15))
require(xts)
head(index(data.EURUSD.M15))
View(data.EURUSD.M15)
d <- data.frame(time = index(data.EURUSD.M15), data.EURUSD.M15)
d <- cbind(data.frame(time = index(data.EURUSD.M15)), data.EURUSD.M15)
d <- cbind(data.frame(time = index(data.EURUSD.M15)), as.data.frame(data.EURUSD.M15))
head(d)
rownames(d) <- NULL
head(d)
head(data.Performer.clean)
subset(data.Performer.clean, data.Performer.clean$Symbol = "EURUSD") -> p1
subset(data.Performer.clean, data.Performer.clean$Symbol == "EURUSD") -> p1
head(p1)
head(d)
range(d$time)
range(p1$open)
p1 <- p1[order(p1$Open.Price), ]
head(p1)
range(p1$open)
p1 <- p1[order(p1$open), ]
rownames(p1) <- NULL
head(p1)
head(d)
class(p1$open)
class(d$time)
which.min(difftime(p1$open[1], d$time), units = "secs")
which.min(difftime(p1$open[1], d$time, units = "secs"))
dd <- d[c(op, cl),]
op <- which.min(difftime(p1$open[1], d$time, units = "secs"))
cl <- which.min(difftime(p1$close[1], d$time, units = "secs"))
dd <- d[c(op, cl),]
dd
p1[1,]
op <- which.min(abs(difftime(p1$open[1], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[1], d$time, units = "secs")))
dd <- d[c(op, cl),]
dd
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
dd
}
klo <- checkvalid(2)
checkvalid(2)
checkvalid(3)
head(dd)
p1[1,]
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
data.frame(Perf = p1$Pips, Hist = en - st )
}
checkvalid(1)
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
data.frame(Perf = p1$Pips[i], Hist = en - st )
}
checkvalid(1)
checkvalid(10)
checkvalid(103)
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
data.frame(Perf = p1$Pips[i], Hist = (en - st)*100 )
}
checkvalid(103:105)
checkvalid(105)
checkvalid(106)
checkvalid(1063)
checkvalid(10632)
checkvalid(106)
checkvalid(2)
checkvalid(3)
head(p1)
p1$Close.Price - p1$Open.Price -> a
b <- p1$Pips / 100
bla <- data.frame(a =a, b = b)
head(bla)
b <- p1$Pips / 10000
bla <- data.frame(a =a, b = b)
head(bla)
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
hist2 <-
data.frame(Perf = p1$Pips[i], Hist = hist1)
}
checkvalid(7)
checkvalid(7)
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
hist2 <-
data.frame(Perf = p1$Pips[i], Hist = hist1)
}
checkvalid(7)
checkvalid(7) -> klo
klo
checkvalid <- function (i) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
data.frame(Perf = p1$Pips[i], Hist = hist1)
}
checkvalid(7)
checkvalid(71)
checkvalid(712)
checkvalid(7123)
checkvalid(666)
head(p1)
head(d)
checkvalid <- function (i) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= 15 * 60 & cl <= 15 * 60) {
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
checkvalid(666)
checkvalid <- function (i) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= 15 * 60 & cl <= 15 * 60) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
checkvalid(666)
checkvalid(66)
checkvalid(6)
checkvalid(34)
checkvalid(8)
checkvalid(83)
checkvalid <- function (i) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= 15 * 60 & cl <= 15 * 60) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
print (dd)
print (p1[i,])
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
checkvalid(83)
checkvalid(88)
checkvalid(866)
checkvalid <- function (i, diffallowed = 0) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= diffallowed * 60 & cl <= diffallowed * 60) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
print (dd)
print (p1[i,])
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
checkvalid(88)
lapply(1:100, checkvalid)
checkvalid <- function (i, diffallowed = 0) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= diffallowed * 60 & cl <= diffallowed * 60) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
#print (dd)
#print (p1[i,])
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Index = i, Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
lapply(1:100, checkvalid) -> klo
klo <- klo[sapply(klo, is.null)]
klo
lapply(1:100, checkvalid) -> klo
klo <- klo[!sapply(klo, is.null)]
klo
lapply(klo, function (x) abs(abs(x$Perf) - x$Hist))
unlist(lapply(klo, function (x) abs(abs(x$Perf) - x$Hist)))
klo
head(data.EURUSD.M15)
which.min(c(12,3,4)- c(1,2,3))
#very slow. faster version requires work
approxMatchTimes <- function (t1, t2, minutesTol = 5) {
t1 <- as.numeric(t1)
t2 <- as.numeric(t2)
tol <- minutesTol * 60
inds <- unlist(lapply(t1, function (x) which.min(abs(t1-t2))))
diffs <- unlist(lapply(1:length(inds), function (i) abs(t1[i] - t2[inds[i]]) <= tol))
inds[!diffs] <- 0
inds
}
index(data.EURUSD.M15) -> t1
t1
t2 <- t1
data.Performer.clean$open[1]
data.Performer.clean$open -> t1
approxMatchTimes(t1[1:100], t2[1:100])
t1[1:100]
t1[2:100]
t2[2:100]
order(index(data.EURUSD.M15))
all(diff(order(index(data.EURUSD.M15))) == 1)
head(data.Performer.clean)
data.Performer.clean <- data.Performer.clean[order(data.Performer.clean$open)]
data.Performer.clean <- data.Performer.clean[order(data.Performer.clean$open), ]
data.Performer.clean$open -> t1
approxMatchTimes(t1[1:100], t2[1:100])
approxMatchTimes(t1, t2) -> inds
warnings()
inds
which(inds != 0)
require(xts)
#very slow. faster version requires work
approxMatchTimes <- function (t1, t2, minutesTol = 5) {
t1 <- as.numeric(t1)
t2 <- as.numeric(t2)
tol <- minutesTol * 60
inds <- unlist(lapply(t1, function (x) which.min(abs(t1-t2))))
diffs <- unlist(lapply(1:length(inds), function (i) abs(t1[i] - t2[inds[i]]) <= tol))
inds[diffs] <- 0
inds
}
#requires historyData to be of class xts
getCandles <- function (historyData = data.EURUSD.M15,
performerData = data.Performer.cleansymbol = "EURUSD",
candleNumber = 5,
maxEntries = 100) {
}
checkvalid <- function (i, diffallowed = 0) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= diffallowed * 60 & cl <= diffallowed * 60) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
#print (dd)
#print (p1[i,])
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Index = i, Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
approxMatchTimes(t1, t2) -> inds
which(inds != 0)
inds[100]
t1[100]
t1[94668]
t2[94668]
index(data.EURUSD.M15) -> t2
inds[10]
require(xts)
#very slow. faster version requires work
approxMatchTimes <- function (t1, t2, minutesTol = 5) {
t1 <- as.numeric(t1)
t2 <- as.numeric(t2)
tol <- minutesTol * 60
inds <- unlist(lapply(t1, function (x) which.min(abs(x-t2))))
diffs <- unlist(lapply(1:length(inds), function (i) abs(t1[i] - t2[inds[i]]) <= tol))
inds[diffs] <- 0
inds
}
#requires historyData to be of class xts
getCandles <- function (historyData = data.EURUSD.M15,
performerData = data.Performer.cleansymbol = "EURUSD",
candleNumber = 5,
maxEntries = 100) {
}
checkvalid <- function (i, diffallowed = 0) {
op <- min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- min(abs(difftime(p1$close[i], d$time, units = "secs")))
if (op <= diffallowed * 60 & cl <= diffallowed * 60) {
op <- which.min(abs(difftime(p1$open[i], d$time, units = "secs")))
cl <- which.min(abs(difftime(p1$close[i], d$time, units = "secs")))
dd <- d[c(op, cl),]
#print (dd)
#print (p1[i,])
rownames(dd) <- NULL
st <- dd$Open[1]
en <- dd$Close[2]
hist1 <- (en - st)*10000
bla <- data.frame(Index = i, Perf = p1$Pips[i], Hist = hist1)
return (bla)
} else {
return (NULL)
}
}
approxMatchTimes(t1, t2) -> inds
inds[10]
inds[1000]
inds[10000]
which(inds != 0)
inds[1421]
inds[12550]
T![12550]
t1[12550]
t2[128812]
#very slow. faster version requires work
approxMatchTimes <- function (t1, t2, minutesTol = 5) {
t1 <- as.numeric(t1)
t2 <- as.numeric(t2)
tol <- minutesTol * 60
ii <<- inds <- unlist(lapply(t1, function (x) which.min(abs(x-t2))))
stop()
diffs <- unlist(lapply(1:length(inds), function (i) abs(t1[i] - t2[inds[i]]) <= tol))
inds[diffs] <- 0
inds
}
approxMatchTimes(t1, t2) -> inds
#very slow. faster version requires work
approxMatchTimes <- function (t1, t2, minutesTol = 5) {
t1 <- as.numeric(t1)
t2 <- as.numeric(t2)
tol <- minutesTol * 60
inds <- unlist(lapply(t1, function (x) which.min(abs(x-t2))))
diffs <- unlist(lapply(1:length(inds), function (i) abs(t1[i] - t2[inds[i]])))
inds[diffs > tol] <- 0
inds
}
approxMatchTimes(t1, t2) -> inds
inds[100]
t1[100]
t2[37533]
t1[1000]
inds[1000]
t2[56613]
head(data.Performer.clean)
