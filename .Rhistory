}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
Print(Entries$open)
print(x0)
Print(Entries$close)
print(x1)
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
print(Entries$open)
print(x0)
print(Entries$close)
print(x1)
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(c(Entries$open,x0,Entries$close,x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(Entries$open,x0,Entries$close,x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(as.POSIXct(Entries$open),x0,Entries$close,x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(as.xts(Entries$open),x0,Entries$close,x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(as.numeric(Entries$open),x0,Entries$close,x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(as.character.Date(Entries$open),x0,Entries$close,x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(as.character.Date(Entries$open),x0,as.character.Date(Entries$close,x1)))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
RandomePAHistory<- function(history, performer)
{
require(dplyr)
#filter History and Performer
performer<-performer[performer$Symbol=="EURUSD",]
earliestEntry<-min(performer$open)
subset<-which(earliestEntry<index(history))-1
history<-history[subset,]
#Gernerate a Random Chart
set.seed(1)
RandomChartEnd<-floor(runif(1,500, max=nrow(performer)))
RandomChartStart<-RandomChartEnd-300
#Find all Entries in Chart
f<-as.numeric(performer$open)>=index(history[RandomChartStart]) & as.numeric(performer$open)<=index(history[RandomChartEnd])
Entries<-as.data.frame(performer[f,])
RowCount<-1:nrow(history[RandomChartStart:RandomChartEnd,])
buff<-cbind(history[RandomChartStart:RandomChartEnd,],RowCount)
names(buff)<- c("Open" ,  "High"  , "Low" ,   "Close" , "Volume", "Rowcount")
View(buff)
getBarPosition<- function(x)
{  bar<-NULL
for (open in x)
{
f<-index(buff)<=open
#print(paste(open ," in ", tail(index(buff[f]),1),", in reihe ",tail(buff[f,"Rowcount"],1) ))
bar<- c(bar,tail(buff[f,"Rowcount"],1))
}
bar
}
x0<-getBarPosition(Entries$open)
y0<-as.numeric(Entries$Open.Price)
x1<-getBarPosition(Entries$close)
y1<-as.numeric(Entries$Close.Price)
Entries<-mutate(Entries,Col=ifelse(as.character(Action)=="Sell","red","green"))
# col<-NULL
# for (dir in Entries$Action)
# {
#       if dir=="Sell"
# }
col<-Entries$Col
View(Entries)
#Print Random chart
chart_Series(history[RandomChartStart:RandomChartEnd,])
segments(x0,y0,x1,y1,lwd=3,col = as.character(col))
# print(Entries$open)
# print(x0)
# print(Entries$close)
# print(x1)
View(cbind(as.character.Date(Entries$open),x0,as.character.Date(Entries$close),x1))
}
RandomePAHistory(data.EURUSD.M15,data.Performer.clean)
