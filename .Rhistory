install.packages("KernSmooth")
library(KernSmooth)
install.packages(Rook)
install.packages("Rook")
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
API()
demo("oauth2-github", package = "httr", ask = FALSE)
API
API()
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
API()
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
API()
install.packages("jsonlite")
install.packages("jsonlite")
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
install.packages("jsonlite")
API()
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
API()
gith<-API()
gith[1,]
names(gith)
gith
source('E:/Data Science/Datascience/Data Cleaning/Week2/API.R')
gith<-API()
gith[1,]
gith[1,46]
nrow(gith)
gith[30,46]
gith[,3]="jtleek/datasharing"
gith<-API()
vek<-gith[,3]=="jtleek/datasharing"
vek
gith[vek,46]
install.packages("RMySQL")
?sqldf
library(RMySQL)
?sqldf
quldf
sqldf
install.packages("sqldf")
?sqldf
sessionInfo()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Exploratory Data Analysis")
install.packages()
install.packages("swirl")
library(swirl)
swirl()
library("swirl")
swirl()
?qnorm
qnorm(mean=80,sd=1)
qnorm(70,mean=80,sd=1)
pnorm(70,mean=80,sd=1)
qnorm(0.95,mean=1100, sd=75)
pnorm(70,mean=80,sd=10)
1100+c(-1,1)*qnorm(0.95,mean=1100, sd=75)*75/sqrt(100)
1100+c(-1,1)*qnorm(0.95,mean=1100, sd=75)*(2*75/sqrt(100))
(1100/100)+c(-1,1)*qnorm(0.95,mean=1100, sd=75)*(2*75/sqrt(100))
1100+c(-1,1)*qnorm(0.95,mean=1100, sd=75)*(2*75/sqrt(100))
1100+c(-1,1)*qnorm(0.95,mean=1100, sd=75)*(75^2/100)
1100+c(-1,1)*qnorm(0.95)*100
100+2*10/10
1100+102
qnorm(0.95,75/10,1100)
qnorm(0.95,sd=75/10,mean=1100)
?pbinom
?sd
quantile(1)
norm(1)
ppois(3,5)
ppois(10,5*3)
swirl()
1
2
2
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
skip()
11.7885 *
|sd(fs$sheight-fs$fheight)/sqrt(1078)
11.7885 *
sd(fs$sheight-fs$fheight)/sqrt(1078)
skip()
skip()
library("swirl")
swirl()
pt(q=2.5,df=15,lower.tail = FALSE)
qnorm(95)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail = FALSE)
pbinom(6,size=8,prob=.5,lower.tail = TRUE)
pbinom(7,size=8,prob=.5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALSE)
pnorm(.95)
1100+c(-1,1)*pnorm(.95)*(30/sqrt(8))
1100+c(-1,1)*pnorm(.95)*(30/sqrt(9))
library(swirl)
swirl()
fit<- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slop <- fit$coef[2]
ols.slope <- fit$coef[2]
editor(file = file, title = title)
options(editor = "internal")
swirl()
rhs- lhs
lhs-rhs
all.equal(lhs,rhs)
var(OLS)
varChild<-var(OLS)
varChild<-var(x)
skip()
varRes<-var(fit$residuals)
varEst<-var(ols.slope-ols.ic)
varEst<-var(est(ols.slope,ols.ic)
)
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
cor(efit$residuals,attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(child~parent,goltan)
l_nor<-lm(child~parent,golten)
l_nor<-lm(child~parent,galton)
l_nor <- lm(gch_nor ~ gpa_nor)
fit<-lm(child~parten,galton)
fit<-lm(child~parent,galton)
sum(fit$residuals)/926
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
squrt(deviance(fit)/(n-2))
sqrt(deviance(fit)/(n-2))
mu <-mean(galton$child)
sTot<-galton$child-mu
sTot<-sum(galton$child-mu)^2)
sTot<-sum((galton$child-mu)^2)
skip()
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton.parent)
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones<-rep(1,nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit<-lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <-lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
skip()
summary(all)
lm(formula = Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Education,swiss$Examination)
cor(swiss$Education,swiss$Agriculture)
makelms()
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility~.+ec,swiss)
efit$coefficients-all$coefficients
all$coefficients-efit$coefficients
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
summary(fit)$coefficients
coef(summary(fit))
summary(fit$residuals)
summary(fit)$sigma
help mtcars
?mtcars
fit<-lm(mpg~weight,mtcars)
fit<-lm(mpg~wt,mtcars)
predict(fit, newdata = data.frame(x = 3), interval = ("prediction"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
?predict
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
swirl()
skip()
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[â€¢,2])
summary(InsectSprays[,2])
sapply(classes,InsectSprays)
sapply(classes,"function",InsectSprays)
skip()
lm(count~spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coefficients
summary(fit)$coef
est=x[,1]
est=InsectSprays[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
relevel(InsectSprays$spray,"C")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,InsectSprays)
fit2<-lm(count~spray2,InsectSprays)
summary(spray2)$coef
summary(spray2)$cooef
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
fit<-lm(Numeric[x[hunger$Sex=="Female"]]~Year,hunger)
fit<-lm(Numeric~Year,hungerx[hunger$Sex=="Female"])
fit<-lm(Numeric~Year,hunger$Sex=="Female")
fit<-lm(Numericx[hunger$Sex=="Female"]~Yearx[hunger$Sex=="Female"],hunger)
fit<-lm(Numeric[x[hunger$Sex=="Female"]]~Year[x[hunger$Sex=="Female"]],hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<- lm(Numeric, Year + Sex, Hunge)
lmBoth<- lm(Numeric, Year + Sex, Hunger)
lmBoth<- lm(Numeric ~Year + Sex, Hunger)
lmBoth<- lm(Numeric ~ Year + Sex, Hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)$coef
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit,which=1)
fitno<-out2[-1,]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno,which=1)
skip()
head(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
skip()
skip()
Use head(cbind(rstd, rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3
)
plot(fit, which=2)
skip()
resid(fit)[1]/(sigma1 + sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
skip()
skip()
swirl()
library(swirl)
swirl()
skip()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
install.packages(rtools)
install.packages(Rtools)
install.packages(RTools)
install.packages("RTools")
install.packages("Rtools")
install.packages("rtools")
install.packages("devtools")
find_rtools()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
Diamonds App Pitch
Diamonds App Pitch
shiny::runApp('Data Products')
setwd("E:/Tading/ReverseeEgenieering")
load("E:/Tading/ReverseeEgenieering/.RData")
