xyplot(Life.Exp~Income|region,state, layout=c(4,1))
xyplot(Life.Exp~Income|region,state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$modle)
table(mpg$model)
qplot(displ,hwy,mpg)
?qplot
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm = TURE)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Monat",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
main("Ozone and Wind in New York City")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
scatterplot(airquality$Wind,airquality$Ozone,type="n")
plot(airquality$Wind,airquality$Ozone,type="n")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
lkj
lkj
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(may$Wind,may$Ozone,col="blue",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend()
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline()
abline(v=median(airquality$Wind),lty=2,lwd=2)
swirl()
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma =
c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer = TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, pch=8, col="red", main="Big Apple Data", layout= c(5,1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
myedit("plot1.R")
myedit
file.edig
file.edit
View(state)
View(myedit)
View(myedit)
myedit("plot1.R")
View(myedit)
View(myedit)
options(editor="internal")
library(swirl)
swirl()
myedit("plot1.R")
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"))
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors())
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq,0,1,len=6)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
p1(20)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=0.5)
p3
p3(5)
x
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,0.3))
v1
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
p
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
x
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv,geom=c("point","smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
p
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv,binwidth=2)
p
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ,hwy, data = mpg,geom=c("point", "smooth") ,facets = drv ~ .)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g<-ggplot(mpg,displ,)
g<-ggplot(mpg,displ)
g<-ggplot(mpg,displ,hwy)
p
g <- ggplot(mpg, aes(displ,hwy) )
g
summary(g)
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
p
g+geom_point()+geom_smooth(method="lm")
p
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv) +ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=0.5)
g+geom_point(size=4,alpha=0.5,aes(color=drv))
p
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
p
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
p
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
p
plot(myx, myy, type = "l", ylim = c(-3,3))
p
g <- ggplot(testdat, aes(x = myx, y = myy))
p
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(ylim=c(-3,3))
p
g + geom_line() + ylim(-3,3)
p
g + geom_line() + coord_cartesian(ylim=c(-3,3))
p
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(formula=drv~cyl,margins = TRUE)
p
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) a
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
p
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
p
Typeg + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library(swirl)
swirl()
str(diamonds)
qplot(price,data = diamonds)
range(diamonds$price)
qplot(price,diamonds,binwidth=18497/30)
qplot(price,diamonds,binwidth=18497/30)
p
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(orice, data=diamonds,geom="density")
n
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shapes=cut)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method = "lm")
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method = "lm")+facets(.~cut)
g
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds)
g <- ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
k
p
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
p
diamonds$car2 <- cut(diamonds$carat,cutpoints)
p
g <- ggplot(diamonds,aes(depth,price))
p
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
p
diamonds[myd,]
p
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
p
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
View(p2)
swirl()
m
Quit()
Stop()
next()
skip()
skip()
skip()
skip()
skip()
next()
next()
skip()
skip()
skip()
next()
skip()
swirl()
swirl()
swirl()
swirl()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
apply(distTmp2,2,which.min)
skip()
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
skip()
kmeans(dataFrame,centers = 3)
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
skip()
options(editor="internal").
options(editor="internal")
swirl()
myedit("addPatt.R")
skip()
heatmap(dataFrame)
heatmap(dataM)
heatmap(dataMatrix)
skip()
skip()
skip()
svd(scale(mat))
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
a2
skip()
skip()
skip()
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
skip()
deck
52
1/13
(1/13)^5
(1/13)^4
(1/13)^3
skip()
3*4/52
1/12
1/2
2/51
1.6*0.8
1.6*0.8/2
0.8
0.64
mypdf
integrate(mypdf, 0,1.6)
(1)/4+
0
2^0.5
skip()
1-0.001
skip()
0.000997/0.014985
(.997*.001) /(.997*.001 + .015*.999)
3,5
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
skip()
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
library(swirl)
Master
swirl()
99.7*0.001
Skip()
skip()
0.997*(1-0.001)
skip()
.997*.001/(.997*.001 +  (1-.985)*(1-.001)  )
dice_sqr
skip()
skip()
skip()
library("swirl")
swirl()
swirl()
coinPlot()
coinPlot(10)
coinPlot(10000)
qnorm(.95)
60+c(-1,1)*qnorm(.975)*sqrt(60(1-60)/100)
60+c(-1,1)*qnorm(.975)*sqrt(60*(1-60)/100)
.6+c(-1,1)*qnorm(.975)*sqrt(.6*(1-0.6)/100)
x$conf.int
skip()
mywald(0.2)
ACCompar(20)
lamb=5/94.32
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poiddon.test(5,94.32)$conf
poison.test(5,94.32)$conf
poisson.test(5,94.32)$conf
library("swirl")
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference<-g2-g1
mean(diffence)
mean(difference)
s<-sd(difference)
qt(.975,9)+c(-1,1)*mn
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(.975,9)$conf.int
skip()
options(editor = "internal")
swirl()
swirl()
sp<-(8-1)*15.34^2+(21-1)*18.23^2
7+20
ns<-27
sp<-sqrt(sp/ns)
skip()
skip()
skip()
t.test(g2-g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=true,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
skip()
skip()
skip()
skip()
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
options(editor = "internal")
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("knitr",
"RWekajars",
"qdapDictionaries",
"qdapRegex",
"qdapTools",
"RColorBrewer",
"qdap",
"NLP",
"tm",
"SnowballC",
"slam",
"RWeka",
"rJava",
"wordcloud",
"stringr",
"DT",
"stringi",
"googleVis",
"ggplot2")
ipak(packages)
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
install.packages()
install.packages("rJava")
library(rJava)
version()
library(rJava)
library(RWekajars)
shiny::runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
This exercise was divided into seven sub tasks like data cleansing, exploratory analysis, the creation of a predictive model and more.
runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
While entering the text (**1**), the field with the predicted next word (**2**) refreshes instantaneously and also the whole text input (**3**) gets displayed.
runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
runApp('D:/Data Science/Capstone/ShinyApp')
setwd("~/Trading/02_Research/ReverseEngineering")
load(".RData")
